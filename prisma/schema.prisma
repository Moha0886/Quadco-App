generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Customer {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  phone         String?
  address       String?
  taxId         String?        @map("tax_id")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  deliveryNotes DeliveryNote[]
  invoices      Invoice[]
  quotations    Quotation[]

  @@map("customers")
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String?
  price       Float
  unit        String     @default("pcs")
  category    String?
  stock       Int        @default(0)
  taxable     Boolean    @default(false)
  taxRate     Float      @default(0) @map("tax_rate")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  lineItems   LineItem[]

  @@map("products")
}

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  services    Service[]

  @@map("service_categories")
}

model Service {
  id          String          @id @default(cuid())
  name        String
  description String?
  basePrice   Float           @map("base_price")
  unit        String          @default("hour")
  categoryId  String          @map("category_id")
  isActive    Boolean         @default(true) @map("is_active")
  taxable     Boolean         @default(false)
  taxRate     Float           @default(0) @map("tax_rate")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  lineItems   LineItem[]
  category    ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("services")
}

model Supplier {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  taxId     String?  @map("tax_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("suppliers")
}

model Quotation {
  id         String     @id @default(cuid())
  customerId String     @map("customer_id")
  date       DateTime   @default(now())
  validUntil DateTime   @map("valid_until")
  status     String     @default("draft")
  subtotal   Float      @default(0)
  taxAmount  Float      @default(0) @map("tax_amount")
  total      Float      @default(0)
  notes      String?
  createdBy  String?    @map("created_by")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  invoices   Invoice[]
  lineItems  LineItem[]
  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  creator    User?      @relation("QuotationCreatedBy", fields: [createdBy], references: [id])

  @@map("quotations")
}

model Invoice {
  id            String         @id @default(cuid())
  customerId    String         @map("customer_id")
  quotationId   String?        @map("quotation_id")
  invoiceNumber String         @unique @map("invoice_number")
  date          DateTime       @default(now())
  dueDate       DateTime       @map("due_date")
  status        String         @default("draft")
  subtotal      Float          @default(0)
  taxAmount     Float          @default(0) @map("tax_amount")
  total         Float          @default(0)
  notes         String?
  createdBy     String?        @map("created_by")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  deliveryNotes DeliveryNote[]
  payments      Payment[]
  quotation     Quotation?     @relation(fields: [quotationId], references: [id])
  customer      Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  creator       User?          @relation("InvoiceCreatedBy", fields: [createdBy], references: [id])
  lineItems     LineItem[]

  @@map("invoices")
}

model DeliveryNote {
  id             String     @id @default(cuid())
  customerId     String     @map("customer_id")
  invoiceId      String?    @map("invoice_id")
  deliveryNumber String     @unique @map("delivery_number")
  date           DateTime   @default(now())
  deliveredDate  DateTime?  @map("delivered_date")
  status         String     @default("pending")
  notes          String?
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  invoice        Invoice?   @relation(fields: [invoiceId], references: [id])
  customer       Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  lineItems      LineItem[]

  @@map("delivery_notes")
}

model LineItem {
  id             String        @id @default(cuid())
  quantity       Float
  unitPrice      Float         @map("unit_price")
  subtotal       Float         @default(0)
  taxRate        Float         @default(0) @map("tax_rate")
  taxAmount      Float         @default(0) @map("tax_amount")
  total          Float
  description    String?
  itemType       String        @map("item_type")
  productId      String?       @map("product_id")
  serviceId      String?       @map("service_id")
  quotationId    String?       @map("quotation_id")
  invoiceId      String?       @map("invoice_id")
  deliveryNoteId String?       @map("delivery_note_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  deliveryNote   DeliveryNote? @relation(fields: [deliveryNoteId], references: [id], onDelete: Cascade)
  invoice        Invoice?      @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  quotation      Quotation?    @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  service        Service?      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  product        Product?      @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("line_items")
}

model Payment {
  id            String   @id @default(cuid())
  invoiceId     String   @map("invoice_id")
  amount        Float
  paymentDate   DateTime @default(now()) @map("payment_date")
  paymentMethod String   @map("payment_method")
  reference     String?
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  password  String
  isActive  Boolean  @default(true) @map("is_active")
  lastLogin DateTime? @map("last_login")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relationships
  userRoles UserRole[]
  createdQuotations Quotation[] @relation("QuotationCreatedBy")
  createdInvoices   Invoice[]   @relation("InvoiceCreatedBy")
  
  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isSystem    Boolean  @default(false) @map("is_system") // System roles cannot be deleted
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relationships
  userRoles     UserRole[]
  rolePermissions RolePermission[]
  
  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  resource    String   // e.g., "quotations", "invoices", "customers"
  action      String   // e.g., "create", "read", "update", "delete"
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relationships
  rolePermissions RolePermission[]
  
  @@unique([resource, action])
  @@map("permissions")
}

model UserRole {
  id     String @id @default(cuid())
  userId String @map("user_id")
  roleId String @map("role_id")
  
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String @map("role_id")
  permissionId String @map("permission_id")
  
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relationships
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}
