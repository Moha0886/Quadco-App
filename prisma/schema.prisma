// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management Models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String?
  lastName  String?
  password  String
  isActive  Boolean  @default(true)
  roleId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  role Role? @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  resource    String   // e.g., 'customers', 'products', 'invoices'
  action      String   // e.g., 'create', 'read', 'update', 'delete'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  roles RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// Business Models
model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  taxId     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  quotations    Quotation[]
  invoices      Invoice[]
  deliveryNotes DeliveryNote[]
  payments      Payment[]

  @@map("customers")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  unit        String  @default("pcs")
  category    String?
  stock       Int     @default(0)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lineItems LineItem[]

  @@map("products")
}

model ServiceCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  services Service[]

  @@map("service_categories")
}

model Service {
  id          String  @id @default(cuid())
  name        String
  description String?
  basePrice   Decimal @db.Decimal(10, 2)
  unit        String  @default("hour")
  categoryId  String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category  ServiceCategory? @relation(fields: [categoryId], references: [id])
  lineItems LineItem[]

  @@map("services")
}

model Quotation {
  id         String            @id @default(cuid())
  customerId String
  date       DateTime          @default(now())
  validUntil DateTime?
  status     QuotationStatus   @default(DRAFT)
  notes      String?
  subtotal   Decimal           @db.Decimal(10, 2)
  taxRate    Decimal           @default(0) @db.Decimal(5, 2)
  taxAmount  Decimal           @default(0) @db.Decimal(10, 2)
  total      Decimal           @db.Decimal(10, 2)
  currency   String            @default("NGN")
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  // Relations
  customer  Customer   @relation(fields: [customerId], references: [id])
  lineItems LineItem[]
  invoices  Invoice[]

  @@map("quotations")
}

model Invoice {
  id           String        @id @default(cuid())
  customerId   String
  quotationId  String?
  date         DateTime      @default(now())
  dueDate      DateTime?
  status       InvoiceStatus @default(DRAFT)
  notes        String?
  subtotal     Decimal       @db.Decimal(10, 2)
  taxRate      Decimal       @default(0) @db.Decimal(5, 2)
  taxAmount    Decimal       @default(0) @db.Decimal(10, 2)
  total        Decimal       @db.Decimal(10, 2)
  paidAmount   Decimal       @default(0) @db.Decimal(10, 2)
  currency     String        @default("NGN")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  customer      Customer       @relation(fields: [customerId], references: [id])
  quotation     Quotation?     @relation(fields: [quotationId], references: [id])
  lineItems     LineItem[]
  deliveryNotes DeliveryNote[]
  payments      Payment[]

  @@map("invoices")
}

model DeliveryNote {
  id            String             @id @default(cuid())
  customerId    String
  invoiceId     String?
  date          DateTime           @default(now())
  deliveredDate DateTime?
  status        DeliveryNoteStatus @default(PENDING)
  notes         String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  // Relations
  customer  Customer  @relation(fields: [customerId], references: [id])
  invoice   Invoice?  @relation(fields: [invoiceId], references: [id])
  lineItems LineItem[]

  @@map("delivery_notes")
}

model LineItem {
  id             String  @id @default(cuid())
  itemType       String  // 'PRODUCT' or 'SERVICE'
  productId      String?
  serviceId      String?
  documentId     String
  documentType   String  // 'QUOTATION', 'INVOICE', 'DELIVERY_NOTE'
  description    String
  quantity       Decimal @db.Decimal(10, 3)
  unitPrice      Decimal @db.Decimal(10, 2)
  total          Decimal @db.Decimal(10, 2)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  product      Product?      @relation(fields: [productId], references: [id])
  service      Service?      @relation(fields: [serviceId], references: [id])
  quotation    Quotation?    @relation(fields: [documentId], references: [id], map: "line_items_quotation_fkey")
  invoice      Invoice?      @relation(fields: [documentId], references: [id], map: "line_items_invoice_fkey")
  deliveryNote DeliveryNote? @relation(fields: [documentId], references: [id], map: "line_items_delivery_note_fkey")

  @@map("line_items")
}

model Payment {
  id          String        @id @default(cuid())
  customerId  String
  invoiceId   String?
  amount      Decimal       @db.Decimal(10, 2)
  currency    String        @default("NGN")
  method      PaymentMethod @default(CASH)
  reference   String?
  date        DateTime      @default(now())
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  customer Customer @relation(fields: [customerId], references: [id])
  invoice  Invoice? @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

// Enums
enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PARTIALLY_PAID
  OVERDUE
  CANCELLED
}

enum DeliveryNoteStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CARD
  CHEQUE
  OTHER
}
